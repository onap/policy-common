{
  "comments": [
    {
      "key": {
        "uuid": "4ada5316_880fd2f0",
        "filename": "common-logging/src/main/java/org/onap/policy/common/logging/eelf/PolicyLogger.java",
        "patchSetId": 8
      },
      "lineNbr": 484,
      "author": {
        "id": 1677
      },
      "writtenOn": "2020-04-27T13:55:53Z",
      "side": 1,
      "message": "So in general with these checks, there\u0027s an assumption that if there\u0027s only one argument and the it isn\u0027t a throwable, the message is the class name. That isn\u0027t always going to be the case but if everyone else is okay with that then that is okay with me. It\u0027s a small detail.",
      "revId": "0be9dec09d1ddca96f664e033b3a0a159f6bcd31",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30bfbb50_f0af4168",
        "filename": "common-logging/src/main/java/org/onap/policy/common/logging/eelf/PolicyLogger.java",
        "patchSetId": 8
      },
      "lineNbr": 484,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-04-27T15:18:45Z",
      "side": 1,
      "message": "That is certainly what the old method did, the method that this subsumed.  Whether it\u0027s a valid assumption or not, I\u0027m not sure.  Honestly, I\u0027m still not sure of the purpose of these changes, as I don\u0027t think we intend to modify existing code to use this new functionality.  In fact, I think we plan to eliminate flexlogger altogether.",
      "parentUuid": "4ada5316_880fd2f0",
      "revId": "0be9dec09d1ddca96f664e033b3a0a159f6bcd31",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39698f36_cff8a095",
        "filename": "common-logging/src/main/java/org/onap/policy/common/logging/eelf/PolicyLogger.java",
        "patchSetId": 8
      },
      "lineNbr": 484,
      "author": {
        "id": 1677
      },
      "writtenOn": "2020-04-27T15:33:53Z",
      "side": 1,
      "message": "I agree that the prior implementation made that assumption but at least it was explicit in the arguments that the string was \"className\" so it gives a hint to the developer of what it is specifically using the string as. I think changing it to message is fine too but then placing the value in the MDC with the classNameProp key is a little off putting to me as it may or may not be an actual class name. That being said I don\u0027t have a strong opinion on the matter so I\u0027m fine with it if everyone else is. Perhaps a note in the Java doc that describes under what conditions message is used as a className could help clarify.",
      "parentUuid": "30bfbb50_f0af4168",
      "revId": "0be9dec09d1ddca96f664e033b3a0a159f6bcd31",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "473a5029_f5627100",
        "filename": "common-logging/src/main/java/org/onap/policy/common/logging/eelf/PolicyLogger.java",
        "patchSetId": 8
      },
      "lineNbr": 484,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-04-27T16:08:32Z",
      "side": 1,
      "message": "Agreed, the doc on line 477 (and other places) should reflect the fact that this is assumed to be a class name, if there is exactly one argument and the argument is not a throwable.  Wonder how often this is used?",
      "parentUuid": "39698f36_cff8a095",
      "revId": "0be9dec09d1ddca96f664e033b3a0a159f6bcd31",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "278d10c5_4036cb01",
        "filename": "common-logging/src/main/java/org/onap/policy/common/logging/eelf/PolicyLogger.java",
        "patchSetId": 8
      },
      "lineNbr": 780,
      "author": {
        "id": 477
      },
      "writtenOn": "2020-04-27T13:46:29Z",
      "side": 1,
      "message": "Is there a reason why these checks \"enabled\" checks are done in this method but not in the other audit ones?\nThe question will apply to all the other methods, metrics, etc ..",
      "revId": "0be9dec09d1ddca96f664e033b3a0a159f6bcd31",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77d93adf_7671ef0e",
        "filename": "common-logging/src/main/java/org/onap/policy/common/logging/flexlogger/EelfLogger.java",
        "patchSetId": 8
      },
      "lineNbr": 5,
      "author": {
        "id": 1677
      },
      "writtenOn": "2020-04-27T13:55:53Z",
      "side": 1,
      "message": "License Update",
      "revId": "0be9dec09d1ddca96f664e033b3a0a159f6bcd31",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34bec049_1d7a9ca2",
        "filename": "common-logging/src/main/java/org/onap/policy/common/logging/flexlogger/SystemOutLogger.java",
        "patchSetId": 8
      },
      "lineNbr": 441,
      "author": {
        "id": 1677
      },
      "writtenOn": "2020-04-27T13:55:53Z",
      "side": 1,
      "message": "Do we really need the check for length of one? Couldn\u0027t OnapLoggingUtils.formatMessage() handle the case of only one argument?",
      "revId": "0be9dec09d1ddca96f664e033b3a0a159f6bcd31",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1cb0256_b67d8525",
        "filename": "common-logging/src/main/java/org/onap/policy/common/logging/flexlogger/SystemOutLogger.java",
        "patchSetId": 8
      },
      "lineNbr": 441,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-04-27T15:18:45Z",
      "side": 1,
      "message": "I think SystemOutLogger is the only place where we want to format the message like this - the other loggers still work differently.",
      "parentUuid": "34bec049_1d7a9ca2",
      "revId": "0be9dec09d1ddca96f664e033b3a0a159f6bcd31",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b3bee57_dc806006",
        "filename": "common-logging/src/main/java/org/onap/policy/common/logging/flexlogger/SystemOutLogger.java",
        "patchSetId": 8
      },
      "lineNbr": 565,
      "author": {
        "id": 1677
      },
      "writtenOn": "2020-04-27T13:55:53Z",
      "side": 1,
      "message": "What about the arguments?",
      "revId": "0be9dec09d1ddca96f664e033b3a0a159f6bcd31",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cf6fe58_03ee8579",
        "filename": "common-logging/src/main/java/org/onap/policy/common/logging/flexlogger/SystemOutLogger.java",
        "patchSetId": 8
      },
      "lineNbr": 565,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-04-27T15:18:45Z",
      "side": 1,
      "message": "oh, good catch!",
      "parentUuid": "8b3bee57_dc806006",
      "revId": "0be9dec09d1ddca96f664e033b3a0a159f6bcd31",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91b3ed63_34704031",
        "filename": "common-logging/src/test/java/org/onap/policy/common/logging/flexlogger/EelfLoggerTest.java",
        "patchSetId": 8
      },
      "lineNbr": 6,
      "author": {
        "id": 1677
      },
      "writtenOn": "2020-04-27T13:55:53Z",
      "side": 1,
      "message": "License Update",
      "revId": "0be9dec09d1ddca96f664e033b3a0a159f6bcd31",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    }
  ]
}