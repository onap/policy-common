{
  "comments": [
    {
      "key": {
        "uuid": "da141535_2f0639cf",
        "filename": "common-logging/src/main/java/org/openecomp/policy/common/logging/flexlogger/FlexLogger.java",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 743
      },
      "writtenOn": "2017-06-09T16:29:28Z",
      "side": 0,
      "message": "Didn\u0027t this code serve a needed function? The method \u0027FlexLogger.getLogger()\u0027 would typically be called during static initialization -- are we guaranteed that \u0027FlexLogger\u0027 static initialization would always occur before the static initialization of classes referencing \u0027FlexLogger.getLogger()\u0027?",
      "revId": "b429e762a77e18a78f3f4862996d3885e5715a04",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da141535_af77e9d3",
        "filename": "common-logging/src/main/java/org/openecomp/policy/common/logging/flexlogger/FlexLogger.java",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 477
      },
      "writtenOn": "2017-06-09T18:34:27Z",
      "side": 0,
      "message": "The class static section I believe it to be executed when class is loaded/initialized, before any instances or static methods can be invoked (so it is thread safe).   Under this belief, the code removed is ok as it is unnecessary.   Based on my tests, it seems to be working as I expected.\n\nThere were/are multiple issues with previous logging code, and in fact what that removed code was trying to achieve, it didn\u0027t.  I\u0027ve seeing output from the PolicyLogger.init() being hit more than once in junits.  So, it didn\u0027t guarantee one single invokation. Further, the previous initLogger() may never initialize the flag, and may be calling initLogger() every single time there is a getLogger() invocation, under the right set of conditions, such as absence of policyLogger.properties, or with parameters missing in the properties files (nullpointerexception issues).   Note in previous version, the flag was updated at the very end of initLogger() and there were paths for abortion.\n\nI think overall this improves several issues.\nI would hope we move away from FlexLogger in the future, so we can deprecate it at some point.",
      "parentUuid": "da141535_2f0639cf",
      "revId": "b429e762a77e18a78f3f4862996d3885e5715a04",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da141535_ca49eb8c",
        "filename": "common-logging/src/main/java/org/openecomp/policy/common/logging/flexlogger/FlexLogger.java",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 743
      },
      "writtenOn": "2017-06-12T08:17:46Z",
      "side": 0,
      "message": "Note the output from running the following class:\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\npublic class Junk\n{\n  static String str1 \u003d initString(\"Initializing \u0027str1\u0027\");\n  static String str2;\n  static\n  {\n\tstr2 \u003d \"Initializing \u0027str2\u0027\";\n\tSystem.out.println(str2);\n  }\n  static String str3 \u003d initString(\"Initializing \u0027str3\u0027\");\n\n  private static String initString(String value)\n  {\n\tSystem.out.println(value);\n\treturn(value);\n  }\n\n  static public void main(String args[])\n  {\n\tSystem.out.println(\"Running \u0027main\u0027\");\n  }\n}\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n$ java Junk\nInitializing \u0027str1\u0027\nInitializing \u0027str2\u0027\nInitializing \u0027str3\u0027\nRunning \u0027main\u0027\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nNote that \u0027str2\u0027, is initialized after \u0027str1\u0027, even though \u0027str1\u0027 initialization is through a method, and \u0027str2\u0027 using a static block. Java does try to initialize dependencies before dependents, but I don\u0027t know if that always works as expected, particularly when there is the possibility of a dependency loop between classes.",
      "parentUuid": "da141535_af77e9d3",
      "revId": "b429e762a77e18a78f3f4862996d3885e5715a04",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    }
  ]
}