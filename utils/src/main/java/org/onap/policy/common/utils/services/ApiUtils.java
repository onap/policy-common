/*
 * ============LICENSE_START=======================================================
 * ONAP
 * ================================================================================
 * Copyright (C) 2019 AT&T Intellectual Property. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END=========================================================
 */

package org.onap.policy.common.utils.services;

import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.Predicate;

/**
 * Utilities for use with "feature APIs".
 */
public class ApiUtils {

    private ApiUtils() {
        // do nothing
    }

    /**
     * Applies a function on each feature provider, stopping as soon as one returns true.
     *
     * @param providers list of feature providers
     * @param predicate function to be applied to each provider
     * @param handleEx function to handle any exception generated by the predicate
     *        (typically, by logging the message)
     * @return {@code true} if one of the providers returned {@code true}, {@code false}
     *         otherwise
     */
    public static <T> boolean apply(List<T> providers, Predicate<T> predicate,
                    BiConsumer<T,Exception> handleEx) {

        for (T feature : providers) {
            try {
                if (predicate.test(feature)) {
                    return true;
                }
            } catch (RuntimeException e) {
                handleEx.accept(feature, e);
            }
        }

        return false;
    }
}
