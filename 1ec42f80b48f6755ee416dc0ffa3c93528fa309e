{
  "comments": [
    {
      "key": {
        "uuid": "6a4e4ecf_cd1058e7",
        "filename": "policy-endpoints/pom.xml",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 3239
      },
      "writtenOn": "2021-08-09T17:17:32Z",
      "side": 1,
      "message": "may be just call it \"io.prometheus.version\"",
      "range": {
        "startLine": 43,
        "startChar": 9,
        "endLine": 43,
        "endChar": 43
      },
      "revId": "1ec42f80b48f6755ee416dc0ffa3c93528fa309e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "607d4e17_09fc87b6",
        "filename": "policy-endpoints/pom.xml",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 811
      },
      "writtenOn": "2021-08-18T14:05:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6a4e4ecf_cd1058e7",
      "range": {
        "startLine": 43,
        "startChar": 9,
        "endLine": 43,
        "endChar": 43
      },
      "revId": "1ec42f80b48f6755ee416dc0ffa3c93528fa309e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d639c6f3_a0cb1a2a",
        "filename": "policy-endpoints/pom.xml",
        "patchSetId": 1
      },
      "lineNbr": 171,
      "author": {
        "id": 477
      },
      "writtenOn": "2021-08-10T00:53:43Z",
      "side": 1,
      "message": "blank line between dependencies to follow existing layout convention in file",
      "revId": "1ec42f80b48f6755ee416dc0ffa3c93528fa309e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e583439_44691d86",
        "filename": "policy-endpoints/src/main/java/org/onap/policy/common/endpoints/http/server/HttpServletServer.java",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 477
      },
      "writtenOn": "2021-08-10T00:53:43Z",
      "side": 1,
      "message": "See my general comment about generic servlet support (which will cover metrics plus other uses).",
      "revId": "1ec42f80b48f6755ee416dc0ffa3c93528fa309e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e8ab15b_612cc864",
        "filename": "policy-endpoints/src/main/java/org/onap/policy/common/endpoints/http/server/HttpServletServer.java",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 811
      },
      "writtenOn": "2021-08-18T14:05:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e583439_44691d86",
      "revId": "1ec42f80b48f6755ee416dc0ffa3c93528fa309e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f5e491fb_bc3ad403",
        "filename": "policy-endpoints/src/main/java/org/onap/policy/common/endpoints/http/server/IndexedHttpServletServerFactory.java",
        "patchSetId": 1
      },
      "lineNbr": 143,
      "author": {
        "id": 4903
      },
      "writtenOn": "2021-08-09T11:24:53Z",
      "side": 1,
      "message": "This will bring up the prometheus metrics of the respective PF component on \u003cip\u003e:\u003cport\u003e/metrics \nDoes this look ok, or should we go with the usual url, e.g: \u003cip\u003e:\u003cport\u003e/policy/api/v1/metrics ?\nI prefer the first option, as such versioning and all isn\u0027t really needed and is always going to be a simple get call for metrics.",
      "range": {
        "startLine": 143,
        "startChar": 35,
        "endLine": 143,
        "endChar": 43
      },
      "revId": "1ec42f80b48f6755ee416dc0ffa3c93528fa309e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77c5f963_07f611dc",
        "filename": "policy-endpoints/src/main/java/org/onap/policy/common/endpoints/http/server/IndexedHttpServletServerFactory.java",
        "patchSetId": 1
      },
      "lineNbr": 143,
      "author": {
        "id": 4903
      },
      "writtenOn": "2021-08-09T11:24:53Z",
      "side": 1,
      "message": "I have defaulted this to true here, which means DefaultMetrics like CPU/Memory etc are exposed by default for all Policy components.\nWe can choose to configure this defaultMetrics to true/false, as well as the metrics itself maybe if everyone thinks all of this should be configurable.\nFor e.g., we can add a new field \"exportMetrics\" : true/false, and \"exportDefaultMetrics\": true/false in the individual Policy components\u0027 startup config file.",
      "range": {
        "startLine": 143,
        "startChar": 46,
        "endLine": 143,
        "endChar": 50
      },
      "revId": "1ec42f80b48f6755ee416dc0ffa3c93528fa309e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c611747_074fefb0",
        "filename": "policy-endpoints/src/main/java/org/onap/policy/common/endpoints/http/server/IndexedHttpServletServerFactory.java",
        "patchSetId": 1
      },
      "lineNbr": 143,
      "author": {
        "id": 3239
      },
      "writtenOn": "2021-08-09T17:17:32Z",
      "side": 1,
      "message": "Thanks Ajith for looking into it!\n\nAs per me, we can go with below:\n1) Add a parameter in component config file (exportMetrics: true/false). This solution provides more flexibility at component level \u0026 deployment level to enable/disable prometheus metrics.\n2) I am okay to keep it simple and just have \u003cip\u003e:\u003cport\u003e/metrics as the url. The benefit of that will be ease in configuring the integration for all policy components. And I couldn\u0027t think of a case where we will need the versioning for the metrics api.",
      "parentUuid": "f5e491fb_bc3ad403",
      "range": {
        "startLine": 143,
        "startChar": 35,
        "endLine": 143,
        "endChar": 43
      },
      "revId": "1ec42f80b48f6755ee416dc0ffa3c93528fa309e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41352ad9_5dac4675",
        "filename": "policy-endpoints/src/main/java/org/onap/policy/common/endpoints/http/server/IndexedHttpServletServerFactory.java",
        "patchSetId": 1
      },
      "lineNbr": 143,
      "author": {
        "id": 477
      },
      "writtenOn": "2021-08-10T00:53:43Z",
      "side": 1,
      "message": "This also relates to my comment about keeping it generic when it constructing the server.   In general, I think we don\u0027t want to force a \"prometheus\" servlet every time we build a new server.   For example a component, ie. drools or apex may use n\u003e1 servers and all of those servers will add the \"/metrics\" servlet endpoint.",
      "parentUuid": "9c611747_074fefb0",
      "range": {
        "startLine": 143,
        "startChar": 35,
        "endLine": 143,
        "endChar": 43
      },
      "revId": "1ec42f80b48f6755ee416dc0ffa3c93528fa309e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c953d528_20102fa3",
        "filename": "policy-endpoints/src/main/java/org/onap/policy/common/endpoints/http/server/internal/JettyJerseyServer.java",
        "patchSetId": 1
      },
      "lineNbr": 229,
      "author": {
        "id": 477
      },
      "writtenOn": "2021-08-10T00:53:43Z",
      "side": 1,
      "message": "In theory this class is for the JAX-RS Jersey implementation.   I was thinking that this could go into the parent class, JettyServletServer which I think is the right level of abstraction for it.   I said previously if we can add generic servlet support to that class (similar to the Filter ones), I think that would be better.\n\nAn user can define properties as used in the factory provided that somebody passes the Servlet class name in configuration (ie. MetricsServlet for prometheus) and will bring it up.\n\nI think for the DefaultExports.initialize() we don\u0027t need to worry at this level, provided that this is a library.   An specific component will configure the endpoint to use the prometheus MetricServlet and can it their own code to call it or not if they choose to do so.    One shortcoming from putting it here is that it will get call multiple times, one per server created.   I think it is better to leave that decision to the specific component using this library.",
      "revId": "1ec42f80b48f6755ee416dc0ffa3c93528fa309e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    }
  ]
}